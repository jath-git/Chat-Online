[{"/Users/jathu/Desktop/Clones/chat-online/client/src/index.js":"1","/Users/jathu/Desktop/Clones/chat-online/client/src/App.js":"2","/Users/jathu/Desktop/Clones/chat-online/client/src/components/Join.js":"3","/Users/jathu/Desktop/Clones/chat-online/client/src/components/Chat.js":"4","/Users/jathu/Desktop/Clones/chat-online/client/src/components/InfoBar.js":"5","/Users/jathu/Desktop/Clones/chat-online/client/src/components/Input.js":"6","/Users/jathu/Desktop/Clones/chat-online/client/src/components/Messages.js":"7","/Users/jathu/Desktop/Clones/chat-online/client/src/components/Message.js":"8"},{"size":209,"mtime":1625193561542,"results":"9","hashOfConfig":"10"},{"size":383,"mtime":1625261303642,"results":"11","hashOfConfig":"10"},{"size":752,"mtime":1625261244891,"results":"12","hashOfConfig":"10"},{"size":1618,"mtime":1625861654194,"results":"13","hashOfConfig":"10"},{"size":509,"mtime":1625802445902,"results":"14","hashOfConfig":"10"},{"size":606,"mtime":1625802683264,"results":"15","hashOfConfig":"10"},{"size":364,"mtime":1625861966080,"results":"16","hashOfConfig":"10"},{"size":920,"mtime":1625861708310,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ymrddk",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/Users/jathu/Desktop/Clones/chat-online/client/src/index.js",[],["38","39"],"/Users/jathu/Desktop/Clones/chat-online/client/src/App.js",[],"/Users/jathu/Desktop/Clones/chat-online/client/src/components/Join.js",[],"/Users/jathu/Desktop/Clones/chat-online/client/src/components/Chat.js",["40","41"],"import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport InfoBar from './InfoBar.js';\nimport Input from './Input.js'\nimport Messages from './Messages.js'\nimport './Chat.css';\n\nconst port = 5000;\nlet socket;\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const endpoint = `localhost:${port}`;\n\n    useEffect(() => {\n        setName(location.search.substring(6, location.search.indexOf('&')));\n        setRoom(location.search.substring(location.search.indexOf('&') + 6));\n\n        socket = io(endpoint, { transports: ['websocket'] });\n        socket.emit('join', { name, room }, () => {\n\n        });\n\n        return () => {\n            //   socket.emit('disconnect');\n            socket.off();\n        };\n    }, [endpoint, location.search]);\n\n    useEffect(() => {\n        socket.on('message', message => {\n            setMessages([...messages, message]);\n        });\n    }, [messages]);\n\n    const sendMessage = event => {\n        event.preventDefault();\n        if (message) {\n            socket.emit('sendMessage', message, () => setMessage(''));\n        }\n    }\n\n    return (\n        <div className=\"chatOuter\">\n            <div className=\"chatInner\">\n                {/* <InfoBar room={room} /> */}\n                <Messages messages={messages} />\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;","/Users/jathu/Desktop/Clones/chat-online/client/src/components/InfoBar.js",["42","43"],"import React from 'react';\n\nimport closeIcon from '../images/close.png';\nimport onlineIcon from '../images/online.png';\n\nconst InfoBar = ({ room }) => (\n    <div className=\"infoBarOuter\">\n        <div className=\"infoBarLeft\">\n            <img className=\"onlineIcon\" src={onlineIcon} alt=\"online image\" />\n            <h3>{room}</h3>\n        </div>\n        <div className=\"infoBarRight\">\n            <a href=\"/\"><img src={closeIcon} alt=\"close image\" /></a>\n        </div>\n    </div>\n)\n\nexport default InfoBar;","/Users/jathu/Desktop/Clones/chat-online/client/src/components/Input.js",[],"/Users/jathu/Desktop/Clones/chat-online/client/src/components/Messages.js",[],"/Users/jathu/Desktop/Clones/chat-online/client/src/components/Message.js",["44"],"import React from 'react';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nconst Message = ({ message: { user, text }, name }) => {\n    let isSent = false;\n    const trimmedName = name.trim().toLowerCase();\n    if (user === trimmedName) {\n        isSent = true;\n    }\n\n    return (\n        isSent\n            ? (<div className=\"messageContainer justifyEnd\">\n                <p className=\"sentText\">{trimmedName}</p>\n                <div className=\"messageBox backgroundBlue\">\n                    <p className=\"messageText colorWhite\">{text}</p>\n                </div>\n            </div>)\n            : (<div className=\"messageContainer justifyStart\">\n                <div className=\"messageBox backgroundLight\">\n                    <p className=\"messageText colourDark\">{text}</p>\n                </div>\n                <p className=\"sentText\">{trimmedName}</p>\n            </div>)\n    )\n}\n\nexport default Message;",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":15},{"ruleId":"53","severity":1,"message":"54","line":31,"column":8,"nodeType":"55","endLine":31,"endColumn":35,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":9,"column":13,"nodeType":"59","endLine":9,"endColumn":79},{"ruleId":"57","severity":1,"message":"58","line":13,"column":25,"nodeType":"59","endLine":13,"endColumn":66},{"ruleId":"49","severity":1,"message":"60","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":22},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'InfoBar' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'name' and 'room'. Either include them or remove the dependency array.","ArrayExpression",["63"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'ScrollToBottom' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [endpoint, location.search, name, room]",{"range":"66","text":"67"},[920,947],"[endpoint, location.search, name, room]"]