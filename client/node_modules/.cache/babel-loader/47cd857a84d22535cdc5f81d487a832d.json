{"ast":null,"code":"var _jsxFileName = \"/Users/jathu/Desktop/chat-online/client/src/components/Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport InfoBar from './InfoBar.js';\nimport Input from './Input.js';\nimport Messages from './Messages.js';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst port = 5000;\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  // const [name, setName] = useState('');\n  // const [room, setRoom] = useState('');\n  // const [message, setMessage] = useState([]);\n  // const [messages, setMessages] = useState([]);\n  // const endpoint = `localhost:${port}`;\n  // useEffect(() => {\n  //     setName(location.search.substring(6, location.search.indexOf('&')));\n  //     setRoom(location.search.substring(location.search.indexOf('&') + 6));\n  //     socket = io(endpoint, { transports: ['websocket'] });\n  //     socket.emit('join', { name, room }, () => {\n  //     });\n  //     return () => {\n  //         //   socket.emit('disconnect');\n  //         socket.off();\n  //     };\n  // }, [endpoint, location.search]);\n  // useEffect(() => {\n  //     socket.on('message', message => {\n  //         setMessages([...messages, message]);\n  //     });\n  // }, [messages]);\n  // const sendMessage = event => {\n  //     event.preventDefault();\n  //     if (message) {\n  //         socket.emit('sendMessage', message, () => setMessage(''));\n  //     }\n  // }\n  // return (\n  //     <div className=\"chatOuter\">\n  //         <div className=\"chatInner\">\n  //             <InfoBar room={room} />\n  //             <Messages messages={messages} />\n  //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n  //         </div>\n  //     </div>\n  // )\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chat\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/jathu/Desktop/chat-online/client/src/components/Chat.js"],"names":["React","useEffect","useState","io","InfoBar","Input","Messages","port","socket","Chat","location"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAI,GAAG,IAAb;AACA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAhDD;;KAAMD,I;AAkDN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport InfoBar from './InfoBar.js';\nimport Input from './Input.js'\nimport Messages from './Messages.js'\nimport './Chat.css';\n\nconst port = 5000;   \nlet socket;\n\nconst Chat = ({ location }) => {\n    // const [name, setName] = useState('');\n    // const [room, setRoom] = useState('');\n    // const [message, setMessage] = useState([]);\n    // const [messages, setMessages] = useState([]);\n    // const endpoint = `localhost:${port}`;\n\n    // useEffect(() => {\n    //     setName(location.search.substring(6, location.search.indexOf('&')));\n    //     setRoom(location.search.substring(location.search.indexOf('&') + 6));\n\n    //     socket = io(endpoint, { transports: ['websocket'] });\n    //     socket.emit('join', { name, room }, () => {\n\n    //     });\n\n    //     return () => {\n    //         //   socket.emit('disconnect');\n    //         socket.off();\n    //     };\n    // }, [endpoint, location.search]);\n\n    // useEffect(() => {\n    //     socket.on('message', message => {\n    //         setMessages([...messages, message]);\n    //     });\n    // }, [messages]);\n\n    // const sendMessage = event => {\n    //     event.preventDefault();\n    //     if (message) {\n    //         socket.emit('sendMessage', message, () => setMessage(''));\n    //     }\n    // }\n\n    // return (\n    //     <div className=\"chatOuter\">\n    //         <div className=\"chatInner\">\n    //             <InfoBar room={room} />\n    //             <Messages messages={messages} />\n    //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n    //         </div>\n    //     </div>\n    // )\n\n    return (\n        <h1>Chat</h1>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}