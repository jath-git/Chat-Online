{"ast":null,"code":"var _jsxFileName = \"/Users/jathu/Desktop/Clones/chat-online/client/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport InfoBar from './InfoBar';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst port = 5000;\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const endpoint = `localhost:${port}`;\n  useEffect(() => {\n    setName(location.search.substring(6, location.search.indexOf('&')));\n    setRoom(location.search.substring(location.search.indexOf('&') + 6));\n    socket = io(endpoint, {\n      transports: ['websocket']\n    });\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      //   socket.emit('disconnect');\n      socket.off();\n    };\n  }, [endpoint, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatOuter\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInner\",\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"SeL7R6vpJlyb1lXjzs7MQuOoPoU=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/jathu/Desktop/Clones/chat-online/client/src/components/Chat.js"],"names":["React","useEffect","useState","io","InfoBar","port","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","endpoint","search","substring","indexOf","transports","emit","off","on","sendMessage","event","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAI,GAAG,IAAb;AACA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMe,QAAQ,GAAI,aAAYZ,IAAK,EAAnC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACF,QAAQ,CAACU,MAAT,CAAgBC,SAAhB,CAA0B,CAA1B,EAA6BX,QAAQ,CAACU,MAAT,CAAgBE,OAAhB,CAAwB,GAAxB,CAA7B,CAAD,CAAP;AACAR,IAAAA,OAAO,CAACJ,QAAQ,CAACU,MAAT,CAAgBC,SAAhB,CAA0BX,QAAQ,CAACU,MAAT,CAAgBE,OAAhB,CAAwB,GAAxB,IAA+B,CAAzD,CAAD,CAAP;AAEAd,IAAAA,MAAM,GAAGH,EAAE,CAACc,QAAD,EAAW;AAAEI,MAAAA,UAAU,EAAE,CAAC,WAAD;AAAd,KAAX,CAAX;AACAf,IAAAA,MAAM,CAACgB,IAAP,CAAY,MAAZ,EAAoB;AAAEb,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,MAAM,CAEzC,CAFD;AAIA,WAAO,MAAM;AACT;AACAL,MAAAA,MAAM,CAACiB,GAAP;AACH,KAHD;AAIH,GAbQ,EAaN,CAACN,QAAD,EAAWT,QAAQ,CAACU,MAApB,CAbM,CAAT;AAeAjB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,MAAM,CAACkB,EAAP,CAAU,SAAV,EAAqBX,OAAO,IAAI;AAC5BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT;;AAMA,QAAMU,WAAW,GAAGC,KAAK,IAAI;AACzBA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAId,OAAJ,EAAa;AACTP,MAAAA,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA2BT,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACH;AACJ,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BAEI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA3CD;;GAAMP,I;;KAAAA,I;AA6CN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport InfoBar from './InfoBar';\nimport './Chat.css';\n\nconst port = 5000;\nlet socket;\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const endpoint = `localhost:${port}`;\n\n    useEffect(() => {\n        setName(location.search.substring(6, location.search.indexOf('&')));\n        setRoom(location.search.substring(location.search.indexOf('&') + 6));\n\n        socket = io(endpoint, { transports: ['websocket'] });\n        socket.emit('join', { name, room }, () => {\n\n        });\n\n        return () => {\n            //   socket.emit('disconnect');\n            socket.off();\n        };\n    }, [endpoint, location.search]);\n\n    useEffect(() => {\n        socket.on('message', message => {\n            setMessages([...messages, message]);\n        });\n    }, [messages]);\n\n    const sendMessage = event => {\n        event.preventDefault();\n        if (message) {\n            socket.emit('sendMessage', message, () => setMessage(''));\n        }\n    }\n\n    return (\n        <div className=\"chatOuter\">\n            <div className=\"chatInner\">\n                {/* <InfoBar room={room}/> */}\n                <Input />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}